import pygame
import random

# Screen dimensions
WIDTH = 800
HEIGHT = 600

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)

# Paddle dimensions
PADDLE_WIDTH = 100
PADDLE_HEIGHT = 10

# Ball dimensions
BALL_RADIUS = 10

# Brick dimensions
BRICK_WIDTH = 70
BRICK_HEIGHT = 20

# Number of rows and columns of bricks
ROWS = 5
COLS = 10


class Paddle:
    def __init__(self):
        self.rect = pygame.Rect(WIDTH // 2 - PADDLE_WIDTH // 2, HEIGHT - 20, PADDLE_WIDTH, PADDLE_HEIGHT)

    def move(self, dx):
        if 0 < self.rect.left + dx < WIDTH - PADDLE_WIDTH:
            self.rect.move_ip(dx, 0)

    def draw(self, screen):
        pygame.draw.rect(screen, WHITE, self.rect)


class Ball:
    def __init__(self):
        self.rect = pygame.Rect(WIDTH // 2 - BALL_RADIUS, HEIGHT // 2 - BALL_RADIUS, BALL_RADIUS * 2, BALL_RADIUS * 2)
        self.dx, self.dy = 5, -5

    def move(self):
        self.rect.move_ip(self.dx, self.dy)

    def check_collision_with_walls(self):
        if self.rect.left <= 0 or self.rect.right >= WIDTH:
            self.dx = -self.dx
        if self.rect.top <= 0:
            self.dy = -self.dy

    def check_collision_with_paddle(self, paddle):
        if self.rect.colliderect(paddle.rect):
            self.dy = -self.dy

    def check_collision_with_bricks(self, bricks):
        for brick in bricks[:]:
            if self.rect.colliderect(brick.rect):
                self.dy = -self.dy
                bricks.remove(brick)

    def draw(self, screen):
        pygame.draw.circle(screen, WHITE, self.rect.center, BALL_RADIUS)


class Brick:
    def __init__(self, x, y):
        self.rect = pygame.Rect(x, y, BRICK_WIDTH, BRICK_HEIGHT)

    def draw(self, screen):
        pygame.draw.rect(screen, RED, self.rect)


class BreakoutGame:
    def __init__(self):
        pygame.init()
        self.screen = pygame.display.set_mode((WIDTH, HEIGHT))
        pygame.display.set_caption("Breakout Game")
        self.clock = pygame.time.Clock()

        self.paddle = Paddle()
        self.ball = Ball()
        self.bricks = [Brick(col * BRICK_WIDTH + 10, row * BRICK_HEIGHT + 10) for row in range(ROWS) for col in range(COLS)]

        self.running = True

    def run(self):
        while self.running:
            self.handle_events()
            self.update_game()
            self.draw_game()
            self.clock.tick(60)

        pygame.quit()

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False

    def update_game(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            self.paddle.move(-5)
        if keys[pygame.K_RIGHT]:
            self.paddle.move(5)

        self.ball.move()
        self.ball.check_collision_with_walls()

        if self.ball.rect.bottom >= HEIGHT:
            self.running = False

        self.ball.check_collision_with_paddle(self.paddle)
        self.ball.check_collision_with_bricks(self.bricks)

    def draw_game(self):
        self.screen.fill(BLACK)

        self.paddle.draw(self.screen)
        self.ball.draw(self.screen)

        for brick in self.bricks:
            brick.draw(self.screen)

        pygame.display.flip()


if __name__ == "__main__":
    game = BreakoutGame()
    game.run()
